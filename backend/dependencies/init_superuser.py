from sqlalchemy.orm import Session
from models.users import User, RoleEnum
from models.companies import Company
from passlib.hash import bcrypt
import uuid

def create_default_superusers(db: Session):
    # Step 1: Ensure at least one company exists
    default_company = db.query(Company).first()
    if not default_company:
        default_company = Company(
            id=uuid.uuid4(),  # optional, UUID is generated by default
            name="Default Company"
        )
        db.add(default_company)
        db.commit()
        db.refresh(default_company)
        print(f"🏢 Default company '{default_company.name}' created.")

    # Step 2: Prepare default users
    default_superusers = [
        {
            "email": "asheerali1997@gmail.com",
            "password": "admin",
            "first_name": "asheer",
            "last_name": "ali",
            "phone_number": "+491742555647",
            "role": RoleEnum.superuser,
        },
        {
            "email":  "afshin@allfacetsconsulting.com", 
            "password": "admin",
            "first_name": "afshin",
            "last_name": "shirazi",
            "phone_number": "+17186449039",
            "role": RoleEnum.superuser,
        },
        {
            "email": "musawar.soomro25@gmail.com",
            "password": "admin",
            "first_name": "musawar",
            "last_name": "soomro",
            "role": RoleEnum.manager,
            "company_id": default_company.id  # assign company to manager
        }
    ]

    # Step 3: Create users
    for user_data in default_superusers:
        existing_user = db.query(User).filter(User.email == user_data["email"]).first()
        if not existing_user:
            user = User(
                email=user_data["email"],
                password_hash=bcrypt.hash(user_data["password"]),
                first_name=user_data["first_name"],
                last_name=user_data["last_name"],
                phone_number=user_data.get("phone_number"),
                role=user_data["role"],
                company_id=user_data.get("company_id")  # only set if present
            )
            db.add(user)
            print(f"✅ {user_data['role']} {user_data['email']} created.")
        else:
            print(f"ℹ️ User {user_data['email']} already exists.")

    db.commit()
